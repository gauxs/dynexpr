// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package data

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDb0593a3DecodeDynexprCodegenTestData(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pk":
			if in.IsNull() {
				in.Skip()
				out.PK = nil
			} else {
				if out.PK == nil {
					out.PK = new(string)
				}
				*out.PK = string(in.String())
			}
		case "sk":
			if in.IsNull() {
				in.Skip()
				out.SK = nil
			} else {
				if out.SK == nil {
					out.SK = new(string)
				}
				*out.SK = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "bank_details":
			if in.IsNull() {
				in.Skip()
				out.BankDetails = nil
			} else {
				if out.BankDetails == nil {
					out.BankDetails = new(BankDetails)
				}
				(*out.BankDetails).UnmarshalEasyJSON(in)
			}
		case "family_details":
			if in.IsNull() {
				in.Skip()
				out.FamilyDetails = nil
			} else {
				if out.FamilyDetails == nil {
					out.FamilyDetails = new(FamilyDetail)
				}
				(*out.FamilyDetails).UnmarshalEasyJSON(in)
			}
		case "phone_nos":
			if in.IsNull() {
				in.Skip()
				out.PhoneNos = nil
			} else {
				if out.PhoneNos == nil {
					out.PhoneNos = new([]*string)
				}
				if in.IsNull() {
					in.Skip()
					*out.PhoneNos = nil
				} else {
					in.Delim('[')
					if *out.PhoneNos == nil {
						if !in.IsDelim(']') {
							*out.PhoneNos = make([]*string, 0, 8)
						} else {
							*out.PhoneNos = []*string{}
						}
					} else {
						*out.PhoneNos = (*out.PhoneNos)[:0]
					}
					for !in.IsDelim(']') {
						var v1 *string
						if in.IsNull() {
							in.Skip()
							v1 = nil
						} else {
							if v1 == nil {
								v1 = new(string)
							}
							*v1 = string(in.String())
						}
						*out.PhoneNos = append(*out.PhoneNos, v1)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeDynexprCodegenTestData(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PK != nil {
		const prefix string = ",\"pk\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.PK))
	}
	if in.SK != nil {
		const prefix string = ",\"sk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SK))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.BankDetails != nil {
		const prefix string = ",\"bank_details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BankDetails).MarshalEasyJSON(out)
	}
	if in.FamilyDetails != nil {
		const prefix string = ",\"family_details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FamilyDetails).MarshalEasyJSON(out)
	}
	if in.PhoneNos != nil {
		const prefix string = ",\"phone_nos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.PhoneNos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range *in.PhoneNos {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					out.String(string(*v3))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeDynexprCodegenTestData(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeDynexprCodegenTestData(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeDynexprCodegenTestData(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeDynexprCodegenTestData(l, v)
}
func easyjsonDb0593a3DecodeDynexprCodegenTestData1(in *jlexer.Lexer, out *FamilyDetail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				if out.Children == nil {
					out.Children = new([]*Child)
				}
				if in.IsNull() {
					in.Skip()
					*out.Children = nil
				} else {
					in.Delim('[')
					if *out.Children == nil {
						if !in.IsDelim(']') {
							*out.Children = make([]*Child, 0, 8)
						} else {
							*out.Children = []*Child{}
						}
					} else {
						*out.Children = (*out.Children)[:0]
					}
					for !in.IsDelim(']') {
						var v4 *Child
						if in.IsNull() {
							in.Skip()
							v4 = nil
						} else {
							if v4 == nil {
								v4 = new(Child)
							}
							(*v4).UnmarshalEasyJSON(in)
						}
						*out.Children = append(*out.Children, v4)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "is_married":
			if in.IsNull() {
				in.Skip()
				out.IsMarried = nil
			} else {
				if out.IsMarried == nil {
					out.IsMarried = new(bool)
				}
				*out.IsMarried = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeDynexprCodegenTestData1(out *jwriter.Writer, in FamilyDetail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Children != nil {
		const prefix string = ",\"children\":"
		first = false
		out.RawString(prefix[1:])
		if *in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range *in.Children {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsMarried != nil {
		const prefix string = ",\"is_married\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsMarried))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FamilyDetail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeDynexprCodegenTestData1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FamilyDetail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeDynexprCodegenTestData1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FamilyDetail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeDynexprCodegenTestData1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FamilyDetail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeDynexprCodegenTestData1(l, v)
}
func easyjsonDb0593a3DecodeDynexprCodegenTestData2(in *jlexer.Lexer, out *Child) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "dob":
			if in.IsNull() {
				in.Skip()
				out.DOB = nil
			} else {
				if out.DOB == nil {
					out.DOB = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DOB).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeDynexprCodegenTestData2(out *jwriter.Writer, in Child) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Name))
	}
	if in.DOB != nil {
		const prefix string = ",\"dob\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.DOB).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Child) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeDynexprCodegenTestData2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Child) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeDynexprCodegenTestData2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Child) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeDynexprCodegenTestData2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Child) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeDynexprCodegenTestData2(l, v)
}
func easyjsonDb0593a3DecodeDynexprCodegenTestData3(in *jlexer.Lexer, out *BankDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accounts":
			if in.IsNull() {
				in.Skip()
				out.Accounts = nil
			} else {
				if out.Accounts == nil {
					out.Accounts = new([]*BankAccount)
				}
				if in.IsNull() {
					in.Skip()
					*out.Accounts = nil
				} else {
					in.Delim('[')
					if *out.Accounts == nil {
						if !in.IsDelim(']') {
							*out.Accounts = make([]*BankAccount, 0, 8)
						} else {
							*out.Accounts = []*BankAccount{}
						}
					} else {
						*out.Accounts = (*out.Accounts)[:0]
					}
					for !in.IsDelim(']') {
						var v7 *BankAccount
						if in.IsNull() {
							in.Skip()
							v7 = nil
						} else {
							if v7 == nil {
								v7 = new(BankAccount)
							}
							(*v7).UnmarshalEasyJSON(in)
						}
						*out.Accounts = append(*out.Accounts, v7)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeDynexprCodegenTestData3(out *jwriter.Writer, in BankDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Accounts != nil {
		const prefix string = ",\"accounts\":"
		first = false
		out.RawString(prefix[1:])
		if *in.Accounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range *in.Accounts {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeDynexprCodegenTestData3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeDynexprCodegenTestData3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeDynexprCodegenTestData3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeDynexprCodegenTestData3(l, v)
}
func easyjsonDb0593a3DecodeDynexprCodegenTestData4(in *jlexer.Lexer, out *BankAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bank_account_number":
			if in.IsNull() {
				in.Skip()
				out.BankAccountNumber = nil
			} else {
				if out.BankAccountNumber == nil {
					out.BankAccountNumber = new(int)
				}
				*out.BankAccountNumber = int(in.Int())
			}
		case "account_type":
			if in.IsNull() {
				in.Skip()
				out.AccountType = nil
			} else {
				if out.AccountType == nil {
					out.AccountType = new(BankAccountType)
				}
				*out.AccountType = BankAccountType(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeDynexprCodegenTestData4(out *jwriter.Writer, in BankAccount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BankAccountNumber != nil {
		const prefix string = ",\"bank_account_number\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(*in.BankAccountNumber))
	}
	if in.AccountType != nil {
		const prefix string = ",\"account_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.AccountType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeDynexprCodegenTestData4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeDynexprCodegenTestData4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeDynexprCodegenTestData4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeDynexprCodegenTestData4(l, v)
}
