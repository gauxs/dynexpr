// Code generated by dynexpr for building expression. DO NOT EDIT.

package data

import (
	dynexpr "github.com/gauxs/dynexpr/pkg/v1"
	time "time"
)

type Person_ExpressionBuilder struct {
	PK            dynexpr.DynamoKeyAttribute[*string]
	SK            dynexpr.DynamoKeyAttribute[*string]
	Name          dynexpr.DynamoAttribute[*string]
	BankDetails   dynexpr.DynamoAttribute[*BankDetails_ExpressionBuilder]
	FamilyDetails dynexpr.DynamoAttribute[*FamilyDetail_ExpressionBuilder]
	PhoneNos      dynexpr.DynamoListAttribute[*string]
}

func (o *Person_ExpressionBuilder) BuildTree(name string) *dynexpr.DynamoAttribute[*Person_ExpressionBuilder] {
	o = &Person_ExpressionBuilder{}
	o.PK = *dynexpr.NewDynamoKeyAttribute[*string]().WithName("pk")
	o.SK = *dynexpr.NewDynamoKeyAttribute[*string]().WithName("sk")
	o.Name = *dynexpr.NewDynamoAttribute[*string]().WithName("name")
	o.BankDetails = *(&BankDetails_ExpressionBuilder{}).BuildTree("bank_details")
	o.FamilyDetails = *(&FamilyDetail_ExpressionBuilder{}).BuildTree("family_details")
	o.PhoneNos = *dynexpr.NewDynamoListAttribute[*string]().WithName("phone_nos")
	return dynexpr.NewDynamoAttribute[*Person_ExpressionBuilder]().
		WithAccessReference(o).
		WithName(name).
		WithChildAttribute(&o.PK).
		WithChildAttribute(&o.SK).
		WithChildAttribute(&o.Name).
		WithChildAttribute(&o.BankDetails).
		WithChildAttribute(&o.FamilyDetails).
		WithChildAttribute(&o.PhoneNos)
}

type FamilyDetail_ExpressionBuilder struct {
	Children  dynexpr.DynamoListAttribute[*Child_ExpressionBuilder]
	IsMarried dynexpr.DynamoAttribute[*bool]
}

func (o *FamilyDetail_ExpressionBuilder) BuildTree(name string) *dynexpr.DynamoAttribute[*FamilyDetail_ExpressionBuilder] {
	o = &FamilyDetail_ExpressionBuilder{}
	o.Children = *dynexpr.NewDynamoListAttribute[*Child_ExpressionBuilder]().WithName("children")
	o.IsMarried = *dynexpr.NewDynamoAttribute[*bool]().WithName("is_married")
	return dynexpr.NewDynamoAttribute[*FamilyDetail_ExpressionBuilder]().
		WithAccessReference(o).
		WithName(name).
		WithChildAttribute(&o.Children).
		WithChildAttribute(&o.IsMarried)
}

type Child_ExpressionBuilder struct {
	Name dynexpr.DynamoAttribute[*string]
	DOB  dynexpr.DynamoAttribute[*time.Time]
}

func (o *Child_ExpressionBuilder) BuildTree(name string) *dynexpr.DynamoAttribute[*Child_ExpressionBuilder] {
	o = &Child_ExpressionBuilder{}
	o.Name = *dynexpr.NewDynamoAttribute[*string]().WithName("name")
	o.DOB = *dynexpr.NewDynamoAttribute[*time.Time]().WithName("dob")
	return dynexpr.NewDynamoAttribute[*Child_ExpressionBuilder]().
		WithAccessReference(o).
		WithName(name).
		WithChildAttribute(&o.Name).
		WithChildAttribute(&o.DOB)
}

type BankDetails_ExpressionBuilder struct {
	Accounts dynexpr.DynamoListAttribute[*BankAccount_ExpressionBuilder]
}

func (o *BankDetails_ExpressionBuilder) BuildTree(name string) *dynexpr.DynamoAttribute[*BankDetails_ExpressionBuilder] {
	o = &BankDetails_ExpressionBuilder{}
	o.Accounts = *dynexpr.NewDynamoListAttribute[*BankAccount_ExpressionBuilder]().WithName("accounts")
	return dynexpr.NewDynamoAttribute[*BankDetails_ExpressionBuilder]().
		WithAccessReference(o).
		WithName(name).
		WithChildAttribute(&o.Accounts)
}

type BankAccount_ExpressionBuilder struct {
	BankAccountNumber dynexpr.DynamoAttribute[*int]
	AccountType       dynexpr.DynamoAttribute[*BankAccountType]
}

func (o *BankAccount_ExpressionBuilder) BuildTree(name string) *dynexpr.DynamoAttribute[*BankAccount_ExpressionBuilder] {
	o = &BankAccount_ExpressionBuilder{}
	o.BankAccountNumber = *dynexpr.NewDynamoAttribute[*int]().WithName("bank_account_number")
	o.AccountType = *dynexpr.NewDynamoAttribute[*BankAccountType]().WithName("account_type")
	return dynexpr.NewDynamoAttribute[*BankAccount_ExpressionBuilder]().
		WithAccessReference(o).
		WithName(name).
		WithChildAttribute(&o.BankAccountNumber).
		WithChildAttribute(&o.AccountType)
}
func NewPerson_ExpressionBuilder() dynexpr.DDBItemExpressionBuilder[*Person_ExpressionBuilder] {
	return dynexpr.NewDDBItemExpressionBuilder(&Person_ExpressionBuilder{})
}
